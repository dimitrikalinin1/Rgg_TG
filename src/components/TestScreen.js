import React, { useState } from 'react';
import Button from './Button';
import Card from './Card';

const questions = [
  {
    question: "–°–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≥–∏–º–Ω–∞—Å—Ç–∏–∫–µ?",
    options: ["3", "4", "5", "6"],
    correct: 2,
    explanation: "–í —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≥–∏–º–Ω–∞—Å—Ç–∏–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤: —Å–∫–∞–∫–∞–ª–∫–∞, –æ–±—Ä—É—á, –º—è—á, –±—É–ª–∞–≤—ã –∏ –ª–µ–Ω—Ç–∞."
  },
  {
    question: "–ö–∞–∫–æ–≤–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö?",
    options: ["60-90 —Å–µ–∫—É–Ω–¥", "75-90 —Å–µ–∫—É–Ω–¥", "90-120 —Å–µ–∫—É–Ω–¥", "120-150 —Å–µ–∫—É–Ω–¥"],
    correct: 1,
    explanation: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 75-90 —Å–µ–∫—É–Ω–¥."
  },
  {
    question: "–ß—Ç–æ —Ç–∞–∫–æ–µ '—Ä–∏—Å–∫' –≤ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≥–∏–º–Ω–∞—Å—Ç–∏–∫–µ?",
    options: ["–°–ª–æ–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç", "–≠–ª–µ–º–µ–Ω—Ç –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏", "–û—à–∏–±–∫–∞ –≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏", "–ü–æ—Ç–µ—Ä—è –ø—Ä–µ–¥–º–µ—Ç–∞"],
    correct: 1,
    explanation: "–†–∏—Å–∫ - —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã."
  },
  {
    question: "–ò–∑ —Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–æ—Å—Ç–æ–∏—Ç –æ—Ü–µ–Ω–∫–∞ –≤ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≥–∏–º–Ω–∞—Å—Ç–∏–∫–µ?",
    options: ["2", "3", "4", "5"],
    correct: 1,
    explanation: "–û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: D (—Ç—Ä—É–¥–Ω–æ—Å—Ç—å), E (–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ) –∏ A (–∞—Ä—Ç–∏—Å—Ç–∏–∑–º)."
  },
  {
    question: "–ö–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –º—è—á–∞ –≤ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≥–∏–º–Ω–∞—Å—Ç–∏–∫–µ?",
    options: ["300–≥", "400–≥", "500–≥", "600–≥"],
    correct: 1,
    explanation: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –º—è—á–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 400 –≥—Ä–∞–º–º–æ–≤."
  }
];

const TestScreen = ({ onBack, stats, setStats }) => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [score, setScore] = useState(0);
  const [testCompleted, setTestCompleted] = useState(false);

  const handleAnswerSelect = (answerIndex) => {
    setSelectedAnswer(answerIndex);

    setTimeout(() => {
      const isCorrect = answerIndex === questions[currentQuestion].correct;
      if (isCorrect) {
        setScore(score + 1);
      }

      if (currentQuestion < questions.length - 1) {
        setCurrentQuestion(currentQuestion + 1);
        setSelectedAnswer(null);
      } else {
        // –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
        const finalScore = isCorrect ? score + 1 : score;
        const newStats = {
          ...stats,
          totalTests: stats.totalTests + questions.length,
          correctAnswers: stats.correctAnswers + finalScore,
          progress: Math.round(((stats.correctAnswers + finalScore) / (stats.totalTests + questions.length)) * 100)
        };
        setStats(newStats);
        setTestCompleted(true);
      }
    }, 1500);
  };

  const restartTest = () => {
    setCurrentQuestion(0);
    setSelectedAnswer(null);
    setScore(0);
    setTestCompleted(false);
  };

  if (testCompleted) {
    const percentage = Math.round((score / questions.length) * 100);
    let grade = '';
    let emoji = '';

    if (percentage >= 90) {
      grade = '–û—Ç–ª–∏—á–Ω–æ!';
      emoji = 'üèÜ';
    } else if (percentage >= 70) {
      grade = '–•–æ—Ä–æ—à–æ!';
      emoji = 'üëç';
    } else if (percentage >= 50) {
      grade = '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ';
      emoji = 'üëå';
    } else {
      grade = '–ù—É–∂–Ω–æ –ø–æ–¥—É—á–∏—Ç—å';
      emoji = 'üìö';
    }

    return (
      <div>
        <Button onClick={onBack} className="back-button">‚Üê –ù–∞–∑–∞–¥</Button>
        <Card>
          <div className="result-container">
            <div style={{ fontSize: '64px', marginBottom: '20px' }}>{emoji}</div>
            <h2>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</h2>
            <div className="result-score">{score}/{questions.length}</div>
            <div className="result-grade">{grade}</div>
            <p>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {percentage}%</p>
            <div style={{ marginTop: '30px' }}>
              <Button onClick={restartTest} style={{ marginRight: '10px' }}>
                üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ä–∞–∑
              </Button>
              <Button onClick={onBack} style={{ backgroundColor: '#34C759' }}>
                üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
            </div>
          </div>
        </Card>
      </div>
    );
  }

  const question = questions[currentQuestion];

  return (
    <div>
      <Button onClick={onBack} className="back-button">‚Üê –ù–∞–∑–∞–¥</Button>
      <Card>
        <div className="question-container">
          <div className="question-number">
            –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}
          </div>
          <div className="question-text">{question.question}</div>
          <div className="answer-options">
            {question.options.map((option, index) => {
              let buttonClass = 'answer-button';
              if (selectedAnswer !== null) {
                if (index === question.correct) {
                  buttonClass += ' correct';
                } else if (index === selectedAnswer && index !== question.correct) {
                  buttonClass += ' incorrect';
                }
              }

              return (
                <Button
                  key={index}
                  onClick={() => selectedAnswer === null && handleAnswerSelect(index)}
                  className={buttonClass}
                  style={{
                    backgroundColor: selectedAnswer !== null ? undefined : '#f8f9fa',
                    color: selectedAnswer !== null ? undefined : '#333',
                    cursor: selectedAnswer !== null ? 'default' : 'pointer'
                  }}
                >
                  {String.fromCharCode(65 + index)}. {option}
                </Button>
              );
            })}
          </div>
          {selectedAnswer !== null && (
            <div style={{ marginTop: '20px', padding: '15px', backgroundColor: '#f8f9fa', borderRadius: '8px' }}>
              <strong>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</strong> {question.explanation}
            </div>
          )}
        </div>
      </Card>
    </div>
  );
};

export default TestScreen;
